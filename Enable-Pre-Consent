# Pre-requisites:
# You need following to be installed on your machine
# 0. Windows Powershell
# 1. Microsoft Online Services Sign-In Assistant for IT Professionals RTW https://www.microsoft.com/en-us/download/details.aspx?id=41950 
# 2. Azure Active Directory Module for Windows PowerShell (64-bit version http://go.microsoft.com/fwlink/p/?linkid=236297 

#Specify your CSP tenant Global Admin credentials
$username = "admin@mpuli007.onmicrosoft.com"
$strPass = ConvertTo-SecureString -String "YOUR_PASSWORD" -AsPlainText -Force
$cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ($username,$strPass)
# Start Azure AD PowerShell session
Connect-MsolService -Credential $cred

# the clienId of the web application registered  on the (sandbox) CSP tenant
$appId = "2f7668d6-d1e2-4047-889b-9ee4cf19afbc"

# Fetch your TenantId for querying Graph later
$tenantId = (Get-MsolCompanyInformation).ObjectId.toString()

# Generate a random guid string
$random = [Guid]::NewGuid().toString()

# Create a service principal using the random string as DisplayName and Password
$servicePrincipal = New-MsolServicePrincipal -DisplayName $random -Type Password -Value $random

# Assign service principal to Tenant Admin role
Add-MsolRoleMember -RoleName "Company Administrator" -RoleMemberType ServicePrincipal -RoleMemberObjectId ($servicePrincipal.ObjectId)

# Sleep for 30 seconds
Start-Sleep -s 30

# Construct params for auth request
$authParams = @{grant_type='client_credentials'; client_id=($servicePrincipal.AppPrincipalId); client_secret=$random; resource="https://graph.windows.net/"}

# Request an auth token for the service principal from Azure AD Token endpoint
$authResponse = Invoke-RestMethod -Method POST -Uri ("https://login.microsoftonline.com/{0}/oauth2/token" -f $tenantId) -ContentType "application/x-www-form-urlencoded" -body $authParams

# Extract access token from auth response
$bearerToken = $authResponse.access_token

# Make a Graph query to search for the Application object by appId
$graphResponse = Invoke-RestMethod -Method GET -Uri ("https://graph.windows.net/{0}/applications?api-version=1.6&`$filter=appId eq `'{1}`'" -f $tenantId, $appId) -ContentType "application/json" -Headers @{"Authorization" = ($authResponse.access_token)}

# Get Application's ObjectId
$appObjectId = $graphResponse.value.ObjectId

# Make a Graph query to enable Pre-Consent on the Application object
$graphResponse = Invoke-RestMethod -Method PATCH -Uri ("https://graph.windows.net/{0}/applications/{1}?api-version=1.6" -f $tenantId, $appObjectId) -ContentType "application/Json" -Headers @{"Authorization" = ($authResponse.access_token)} -Body '{"recordConsentConditions":"SilentConsentForPartnerManagedApp"}'

## This is the version that ODIN uses, additionally it adds permissions to Windows Azure Active Director
# Application Name                   GUID
# "Windows Azure Active Directory" - 00000002-0000-0000-c000-000000000000
$graphResponse = Invoke-RestMethod -Method PATCH -Uri "https://graph.windows.net/$tenantId/applications/$appObjectId/?api-version=1.6" -ContentType "application/Json" -Headers @{"Authorization" = ($bearerToken)} -Body '{"recordConsentConditions":"SilentConsentForPartnerManagedApp","availableToOtherTenants":true,"requiredResourceAccess":[{"resourceAppId":"00000002-0000-0000-c000-000000000000","resourceAccess":[{"id":"78c8a3c8-a07e-4b9e-af1b-b5ccab50a175","type":"Role, Scope"}, {"id":"5778995a-e1bf-45b8-affa-663a9f3f4d04","type":"Role, Scope"},{"id":"a42657d6-7f20-40e3-b6f0-cee03008a62a","type":"Scope"},{"id":"311a71cc-e848-46a1-bdf8-97ff7156d8e6","type":"Scope"},{"id": "abefe9df-d5a9-41c6-a60b-27b38eac3efb","type": "Role"}]}]}'


# Write out the Application object data after the change
(Invoke-WebRequest â€“Uri "https://graph.windows.net/$tenantId/applications/$appObjectId/?api-version=1.6" -ContentType "application/json" -Headers @{"Authorization" = ($bearerToken)}).Content


# Delete servicePrincipal object
$servicePrincipal | Remove-MsolServicePrincipal
